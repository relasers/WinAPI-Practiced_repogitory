#include "stdafx.h"
#include "FrameWork.h"

CFrameWork::CFrameWork()
{

}

CFrameWork::~CFrameWork()
{
	Destroy();
}
// 클래스 함수선언은 헤더에서 하는게 아니고 cpp 파일에 한다.
bool CFrameWork::Initial(HWND h, RECT r,HINSTANCE inst) {
	// 변수명 앞에 자료형 쓰면 그건 지역변수가 되어버린다
	m_hwnd = h;
	m_rect = r;
	m_hInst = inst;
	return m_hwnd != NULL; // 윈도우 생성 실패하면 윈도우 핸들이 NULL 값이 들어간다.
						   // 이값이 NULL값일 경우 윈도우가 제대로 만들어지지 않았다는것, 널값이면 윈도우를 죽여라!
}
void CFrameWork::Destroy() { // 반환값은 없어도 상관없다, 어쩌피 죽을테니까, 메모리 누수 방지
							 //소멸자로 소멸할때 Destroy 호출, 소멸자는 함수가 죽어야만 나온다 , 죽이고 다시 생성하고 싶을때 쓰자
							 // 대를 잇게 할때 -> 그떄를 위해 함수를 미리 빼 놓는다

};

LRESULT CFrameWork::WindowMessage(HWND hwnd, UINT iMessage, WPARAM wParam, LPARAM lParam) {

	switch (iMessage) {// 메시지 번호// case: 메시지에 따라 처리
	case WM_TIMER:
		OnTimer(wParam);
		break;
	case WM_LBUTTONDOWN:
	case WM_LBUTTONUP:
	case WM_MOUSEMOVE:
		InputMouse(iMessage, wParam, lParam);
		break;
		/////////////////////////////////////////
	case WM_CHAR:
	case WM_KEYDOWN:
	case WM_KEYUP:
		InputKeyBoard(iMessage, wParam, lParam);
		break;
		///////////////////////////////////////////
	case WM_PAINT: //윈도우 다시 그려줘야 할 때
		hdc = BeginPaint(hwnd, &ps); // WM_PAINT 메세지에서 사용 , 이 외에서 쓸떄는 GetDC(),ReleaseDC() 를 쓴다(잠시 출력할때)
		
		OnDraw(hdc); // hdc 를 OnDraw 로 넘긴다.

		EndPaint(hwnd, &ps);
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;
	} //처리할 메시지만 case문에 나열
	return(DefWindowProc(hwnd, iMessage, wParam, lParam));// CASE에서 정의되지 않은 메시지는 커널이 처리하도록 메시지 전달 
}

void CFrameWork::OnCreate() { // 나중에 3-1학기떄 BuildObject 로 쓴다 , 동적메모리 릴리즈 용
	GetClientRect(m_hwnd,&m_rect);

	srand((unsigned)time(NULL));

	bit_back = (HBITMAP)LoadBitmap(m_hInst,
		MAKEINTRESOURCE(IDB_DESK));
	bit_cat = (HBITMAP)LoadBitmap(m_hInst,
		MAKEINTRESOURCE(IDB_CAT));
	bit_mouse = (HBITMAP)LoadBitmap(m_hInst,
		MAKEINTRESOURCE(IDB_MOUSE));
	POINT cat_temp_pt = { rand() % m_rect.right - 32,rand() % m_rect.bottom - 32 };
	cat.setPos( cat_temp_pt );

	int max_creating = 3 + rand() % (MAX_OBSTACLE-3);
	bool iscol = false;
	for (int i = 0; i < max_creating; ++i) {
		do {
			POINT temp_pos = { rand() % m_rect.right - MAX_OBSTACLE_SIZE,
				rand() % m_rect.bottom - MAX_OBSTACLE_SIZE };
			obstacle[i].setPos(temp_pos);
			iscol = false;
			for (int j = 0; j < max_creating; ++j) {
				if (i != j) {
					if (IntersectRect(&col_check, &obstacle[j].getPos(), &obstacle[i].getPos()))
						iscol = true;
				}
				
			}
		} while (IntersectRect(&col_check,&cat.Getpos(),&obstacle[i].getPos()) || iscol == true);
		obstacle[i].setexist(true);
	}
	SetTimer(m_hwnd,1,1,NULL);
}
void CFrameWork::OnDraw(HDC hdc) { //여기다 드로우를 처리한다
	
	HDC LayDC;
	LayDC = CreateCompatibleDC(hdc); // hdc와 호환시킨다.
	HBITMAP Lay; // 레이어 생성
	Lay = CreateCompatibleBitmap(hdc, m_rect.right, m_rect.bottom); // 다블 버퍼링 ,hdc와 호환시키자.
	SelectObject(LayDC, Lay);
	{
		ClearScreen(LayDC); // 화면 클리어
		MemDC = CreateCompatibleDC(LayDC); // 이건 비트맵 뿌리기용

		SetBkMode(LayDC, TRANSPARENT);
		//////<여기다 그린다>//////////////////////////////////////////////////////////////////

		SelectObject(MemDC, bit_back);
		BitBlt(LayDC, 0, 0, m_rect.right, m_rect.bottom, MemDC, 0, 0, SRCCOPY);
		
		for (int i = 0; i < MAX_OBSTACLE; ++i) {
			if (obstacle[i].getexist())
				Rectangle(LayDC, obstacle[i].getPos().left,
					obstacle[i].getPos().top,
					obstacle[i].getPos().right,
					obstacle[i].getPos().bottom
				);
		}
		
		
		if (mouse.Getexist()) {
			SelectObject(MemDC, bit_mouse);
			TransparentBlt(LayDC, mouse.Getpos().left, mouse.Getpos().top, 32, 32
				, MemDC, mouse.Getframe() * 32, 0, 32, 32, RGB(255, 255, 255)); // 땅을 그린다
		}
		SelectObject(MemDC, bit_cat);
		TransparentBlt(LayDC, cat.Getpos().left, cat.Getpos().top, 32, 32
			, MemDC, cat.Getframe() * 32, 0, 32, 32, RGB(255, 255, 255)); // 땅을 그린다

		
		//////////////////////////////////////////////////////////////////////
		BitBlt(hdc, 0, 0, m_rect.right, m_rect.bottom, LayDC, 0, 0, SRCCOPY);
	}
	

	DeleteObject(Lay);
	DeleteObject(hdc);

	DeleteDC(LayDC);
	DeleteDC(MemDC);
	DeleteDC(hdc);

}
void CFrameWork::OnTimer(UINT id) {
	POINT temp_pos;
	switch (id) {
	case WT_COUNTING:
		mouse.spriteframeinc();
		cat.spriteframeinc();

		if (mouse.Getexist()) {
			if (mouse.Getpos().left < cat.Getpos().left) {
				if(!cat.Getlostpath())
					cat.catmove(Direction::left);
				if (cat.Getlostpath())
					cat.catmove(Direction::right);
			}
			else if (mouse.Getpos().left > cat.Getpos().left) {
				if (!cat.Getlostpath())
					cat.catmove(Direction::right);
				if (cat.Getlostpath())
					cat.catmove(Direction::left);
			}
			if (mouse.Getpos().top < cat.Getpos().top) {
				if (!cat.Getlostpath())
					cat.catmove(Direction::up);
				if (cat.Getlostpath())
					cat.catmove(Direction::down);
			}
			else if (mouse.Getpos().top > cat.Getpos().top) {
				if (!cat.Getlostpath())
					cat.catmove(Direction::down);
				if (cat.Getlostpath())
					cat.catmove(Direction::up);
			}

			for (int i = 0; i < MAX_OBSTACLE; ++i) {
				if (obstacle[i].getexist()) {
					if (IntersectRect(&col_check, &cat.Getpos(), &obstacle[i].getPos())) {
						if (obstacle[i].getPos().left < cat.Getpos().right
							&& obstacle[i].getPos().left > cat.Getpos().left
							//&&(obstacle[i].getPos().top <= cat.Getpos().top && cat.Getpos().bottom <= obstacle[i].getPos().bottom)
							) {
							while (
								IntersectRect(&col_check, &cat.Getpos(), &obstacle[i].getPos())
								) {
								cat.catmove(Direction::left);
							}
							cat.setlostpath(true);
						}
						if (obstacle[i].getPos().right > cat.Getpos().left
							&& obstacle[i].getPos().right < cat.Getpos().right
							//&& (obstacle[i].getPos().top <= cat.Getpos().top && cat.Getpos().bottom <= obstacle[i].getPos().bottom)
							) {
							while (
								IntersectRect(&col_check, &cat.Getpos(), &obstacle[i].getPos())
								) {
								cat.catmove(Direction::right);
							}
							cat.setlostpath(true);
						}
						if (obstacle[i].getPos().top < cat.Getpos().bottom
							&& obstacle[i].getPos().top > cat.Getpos().top
							//&& (obstacle[i].getPos().left <= cat.Getpos().left && cat.Getpos().right <= obstacle[i].getPos().right)
							) {
							while (
								IntersectRect(&col_check, &cat.Getpos(), &obstacle[i].getPos())
								) {
								cat.catmove(Direction::up);
							}
							cat.setlostpath(true);
						}
						if (obstacle[i].getPos().bottom > cat.Getpos().top
							&& obstacle[i].getPos().bottom < cat.Getpos().bottom
							) {
							while (
								IntersectRect(&col_check, &cat.Getpos(), &obstacle[i].getPos())
								) {
								cat.catmove(Direction::down);
							}
							cat.setlostpath(true);
						}
					}
				}
			}

		}
		




		break;
	}
	InvalidateRect(m_hwnd, &m_rect, FALSE);
}
void CFrameWork::InputMouse(UINT iMessage, WPARAM wParam, LPARAM lParam) {
	switch (iMessage) {
	case WM_LBUTTONDOWN:

		ptmouse.x = LOWORD(lParam);
		ptmouse.y = HIWORD(lParam);

		drag = true;

		mouse.setPos(ptmouse);
		mouse.setexist(true);

		InvalidateRect(m_hwnd, &m_rect, FALSE);
		break;
	case WM_MOUSEMOVE:
		if (drag) {
			ptmouse.x = LOWORD(lParam);
			ptmouse.y = HIWORD(lParam);
			mouse.setPos(ptmouse);
		}
		break;
	case WM_LBUTTONUP:
		if (drag) {
			mouse.setexist(false);
			drag = false;
		}
		break;
	}
}
void CFrameWork::InputKeyBoard(UINT iMessage, WPARAM wParam, LPARAM lParam) {
	switch (iMessage) {
	case WM_KEYDOWN:
		break;
	}
	InvalidateRect(m_hwnd, &m_rect, FALSE);
}
void CFrameWork::CreateBkBrush(COLORREF color) {
	if (hbrBackground) DeleteObject(hbrBackground);
	hbrBackground = (HBRUSH)CreateSolidBrush(color);
}
void CFrameWork::ClearScreen(HDC hdc) {
	FillRect(hdc,&m_rect,hbrBackground);
}